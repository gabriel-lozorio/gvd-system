version: '3.8'

services:
  web:
    build: .
    restart: always
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    env_file:
      - .env
    depends_on:
      - db
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - app-network

  db:
    image: postgres:15
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - .env
    restart: always
    networks:
      - app-network

  redis:
    image: redis:7
    restart: always
    networks:
      - app-network

  celery:
    build: .
    command: celery -A config worker -l info
    volumes:
      - .:/app
    env_file:
      - .env
    depends_on:
      - web
      - redis
    networks:
      - app-network
    restart: always

  celery-beat:
    build: .
    command: celery -A config beat -l info
    volumes:
      - .:/app
    env_file:
      - .env
    depends_on:
      - web
      - redis
      - celery
    networks:
      - app-network
    restart: always

  nginx:
    image: nginx:1.25
    ports:
      - "80:80"
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - ./nginx:/etc/nginx/conf.d
    depends_on:
      - web
    networks:
      - app-network
    restart: always

  backup:
    image: postgres:15
    volumes:
      - postgres_data:/var/lib/postgresql/data:ro
      - ./backups:/backups
    env_file:
      - .env
    command: |
      bash -c '
        mkdir -p /backups
        echo "Starting scheduled backups..."
        while :; do
          echo "Creating backup..."
          pg_dump -h db -U $$POSTGRES_USER -d $$POSTGRES_DB | gzip > /backups/backup_$$(date +%Y-%m-%d_%H-%M-%S).sql.gz
          echo "Backup created successfully."
          echo "Cleaning up old backups..."
          find /backups -name "*.sql.gz" -type f -mtime +7 -delete
          echo "Sleeping for 24 hours..."
          sleep 86400
        done
      '
    networks:
      - app-network
    restart: always

volumes:
  postgres_data:
  static_volume:
  media_volume:
  backup_volume:

networks:
  app-network: